---
version: "2.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./mounts/data/zk-data:/var/lib/zookeeper/data
      - ./mounts/logs/zk-txn-logs:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-server:5.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=WARN"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    volumes:
      - ./mounts/data/kafka-data:/var/lib/kafka/data

  # add another schema registry and point the 2nd connect cluster there

  kafka-connect-local:
    image: confluentinc/cp-kafka-connect:5.5.0
    container_name: kafka-connect-local
    hostname: kafka-connect-local
    depends_on:
      - zookeeper
      - broker
    ports:
      - 18083:18083
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: kafka-connect-local
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_KAFKA_HEAP_OPTS: "-Xms256M -Xmx4G"
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-local"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-5.5.0.jar"
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      # Replicator Monitorning
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        apt-get -qq update
        apt-get install -y confluent-kafka-connect-replicator=5.5.0-1
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:0.10.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties

  kafka-connect-ccloud:
    image: confluentinc/cp-kafka-connect:5.5.0
    container_name: kafka-connect-ccloud
    hostname: kafka-connect-ccloud
    healthcheck:
      disable: true
    depends_on:
      - zookeeper
      - broker
    ports:
      - 18084:18084
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONNECT_REST_PORT: 18084
      CONNECT_GROUP_ID: kafka-connect-ccloud
      CONNECT_KAFKA_HEAP_OPTS: "-Xms256M -Xmx4G"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-ccloud"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-5.5.0.jar"
      # Producer config
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      # Consumer config
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      # Replicator Monitorning
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get install -y confluent-kafka-connect-replicator=5.5.0-1
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        confluent-hub install --no-prompt confluentinc/kafka-connect-gcs-source:1.1.0-preview
        confluent-hub install --no-prompt wepay/kafka-connect-bigquery:1.1.2
        confluent-hub install --no-prompt confluentinc/kafka-connect-gcp-bigtable:1.0.0-preview
        #confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:0.2
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties

  kafka-connect-ccloud2:
    image: confluentinc/cp-kafka-connect:5.5.0
    container_name: kafka-connect-ccloud2
    hostname: kafka-connect-ccloud2
    healthcheck:
      disable: true
    ports:
        - 18085:18085
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CCLOUD2_CLUSTER_ENDPOINT}
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD2_API_KEY}" password="${CCLOUD2_API_SECRET}";
      CONNECT_REST_PORT: 18085
      CONNECT_GROUP_ID: kafka-connect-ccloud2
      CONNECT_KAFKA_HEAP_OPTS: "-Xms256M -Xmx4G"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-ccloud2"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-5.5.0.jar"
      # Producer config
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD2_API_KEY}" password="${CCLOUD2_API_SECRET}";
      # Consumer config
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD2_API_KEY}" password="${CCLOUD2_API_SECRET}";
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      # Replicator Monitorning
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get install -y confluent-kafka-connect-replicator=5.5.0-1
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties

  kafka-connect-ccloud3:
    image: confluentinc/cp-kafka-connect:5.5.0
    container_name: kafka-connect-ccloud3
    hostname: kafka-connect-ccloud3
    healthcheck:
      disable: true
    ports:
        - 18086:18086
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CCLOUD3_CLUSTER_ENDPOINT}
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD3_API_KEY}" password="${CCLOUD3_API_SECRET}";
      CONNECT_REST_PORT: 18086
      CONNECT_GROUP_ID: kafka-connect-ccloud3
      CONNECT_KAFKA_HEAP_OPTS: "-Xms256M -Xmx4G"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-ccloud3"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: "/usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-5.5.0.jar"
      # Producer config
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD3_API_KEY}" password="${CCLOUD3_API_SECRET}";
      # Consumer config
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD3_API_KEY}" password="${CCLOUD3_API_SECRET}";
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      # Replicator Monitorning
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get install -y confluent-kafka-connect-replicator=5.5.0-1
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties
    
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - kafka-connect-local
      - kafka-connect-ccloud
      - kafka-connect-ccloud2
      - kafka-connect-ccloud3
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_KAFKA_DC01_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_CONNECT_CONNECT-DC01_CLUSTER: "http://kafka-connect-local:18083"
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SECURITY_PROTOCOL: SASL_SSL
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SASL_MECHANISM: PLAIN
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONTROL_CENTER_KAFKA_GCP-CCLOUD_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONTROL_CENTER_CONNECT_CONNECT-GCP-CCLOUD_CLUSTER: "http://kafka-connect-ccloud:18084"
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_BOOTSTRAP_SERVERS: ${CCLOUD2_CLUSTER_ENDPOINT}
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SECURITY_PROTOCOL: SASL_SSL
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SASL_MECHANISM: PLAIN
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD2_API_KEY}" password="${CCLOUD2_API_SECRET}";
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONTROL_CENTER_KAFKA_AZURE-CCLOUD_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONTROL_CENTER_CONNECT_CONNECT-AZURE-CCLOUD_CLUSTER: "http://kafka-connect-ccloud2:18085"
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_BOOTSTRAP_SERVERS: ${CCLOUD3_CLUSTER_ENDPOINT}
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SECURITY_PROTOCOL: SASL_SSL
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SASL_MECHANISM: PLAIN
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD3_API_KEY}" password="${CCLOUD3_API_SECRET}";
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONTROL_CENTER_KAFKA_AWS-CCLOUD_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONTROL_CENTER_CONNECT_CONNECT-AWS-CCLOUD_CLUSTER: "http://kafka-connect-ccloud3:18086"
      CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://${EXT_IP}:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      CONTROL_CENTER_SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      CONTROL_CENTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksql-server:
    image: confluentinc/cp-ksqldb-server:5.5.0
    hostname: ksql-server
    container_name: ksql-server
    depends_on:
      - control-center
    ports:
      - "8088:8088"
    environment:
      KSQL_HOST_NAME: ksql-server
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_AUTO_OFFSET_RESET: "earliest"
      KSQL_COMMIT_INTERVAL_MS: 0
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: ${CCLOUD_SR_ENDPOINT}
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ${CCLOUD_SR_API_KEY}:${CCLOUD_SR_API_SECRET}
      KSQL_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      KSQL_SECURITY_PROTOCOL: SASL_SSL
      KSQL_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      KSQL_SASL_MECHANISM: PLAIN
      KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KSQL_KSQL_STREAMS_PRODUCER_RETRIES: 2147483647
      KSQL_KSQL_STREAMS_PRODUCER_CONFLUENT_BATCH_EXPIRE_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_PRODUCER_REQUEST_TIMEOUT_MS: 300000
      KSQL_KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 3
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 3
      KSQL_KSQL_SINK_REPLICAS: 3
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      # Consumer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksql-cli:
    image: confluentinc/cp-ksqldb-cli:5.5.0
    container_name: ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./scripts/ksql:/ksql

  mysql:
    # *-----------------------------*
    # To connect to the DB:
    #   docker-compose exec mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
    # *-----------------------------*
    image: debezium/example-mysql:0.9
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ./scripts/mysql_schema.sql:/docker-entrypoint-initdb.d/mysql_schema.sql
    healthcheck:
      test: '/usr/bin/mysql --user=root --password=debezium --execute "SHOW DATABASES;"'
      interval: 5s
      timeout: 20s
      retries: 30

  dbtrans-simulator:
    container_name: db-trans-simulator
    depends_on:
      mysql:
        condition: service_healthy
    command: tail -f /dev/null
    build:
      context: ./db_transaction_simulator

  kafka-create-topics:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka-create-topics
    container_name: kafka-create-topics
    volumes:
      - ./ccloud.properties:/ccloud.properties
      - ./scripts/create_onprem_topics.sh:/create_onprem_topics.sh
    command:
      - bash
      - -c
      - |
        chmod +x /create_onprem_topics.sh
        /create_onprem_topics.sh
    environment:
      # The following settings are listed here only to satisfy the image’s requirements.
      # We override the image’s command anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  demo-docs:
    container_name: demo-docs-webserver
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./docs:/usr/share/nginx/html
